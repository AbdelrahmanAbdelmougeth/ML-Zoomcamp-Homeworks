--> Question 1: Version of Pipenv 

Answer:
C:\Python\zoomcamp> pipenv --version
pipenv, version 2021.5.29

=========================================================================================================
-->Question 2
Use Pipenv to install Scikit-Learn version 1.0
What's the first hash for scikit-learn you get in Pipfile.lock?

Answer:
"_meta": {
        "hash": {
            "sha256": "34547a3dcc21f0399f427311321b7de24a677e97565494d97f5a825b5a6c8284"
        },
=========================================================================================================
---> Question 3:
Let's use these models!

Write a script for loading these models with pickle
Score this customer:
{"contract": "two_year", "tenure": 12, "monthlycharges": 19.7}
What's the probability that this customer is churning?

If you're getting errors when unpickling the files, check their checksum:

$ md5sum model1.bin dv.bin
5868e129bfbb309ba60bf750263afab1  model1.bin
c49b69f8a5a3c560882ff5daa3c0ff4d  dv.bin

============================
Answer:
import pickle
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline


model = pickle.load(open('model1.bin', 'rb'))
model

LogisticRegression()

model_file = 'dv.bin'
with open(model_file , 'rb') as f_in:
    dv = pickle.load(f_in)   
dv

DictVectorizer(sparse=False)


customer = {"contract": "two_year", "tenure": 12, "monthlycharges": 19.7}
X_small = dv.transform([customer])

model.predict_proba(X_small)[0,1]

The answer is 0.11549580587832914
0.115

============================================================================================================
---> Question 4
Now let's serve this model as a web service

Install Flask and Gunicorn (or waitress, if you're on Windows)
Write Flask code for serving the model
Now score this customer using requests:
url = "YOUR_URL"
customer = {"contract": "two_year", "tenure": 1, "monthlycharges": 10}
requests.post(url, json=customer).json()
What's the probability that this customer is churning?

====================
Answer:

/*predict.py file*/
#Load the model
import pickle

from flask import Flask
from flask import request
from flask import jsonify



model = pickle.load(open('model1.bin', 'rb'))

dv_file = 'dv.bin'
with open(dv_file , 'rb') as f_in:
    dv = pickle.load(f_in)   

app = Flask('churn')

@app.route('/predict' , methods=['POST'])
def predict():
    customer = request.get_json()

    X = dv.transform([customer])
    y_pred = model.predict_proba(X)[0,1]
    churn = y_pred >= 0.5

    result = {
        'churn_probability' : float(y_pred),
        'churn':bool(churn)
    }
    return jsonify(result)


if __name__ == "__main__":
    app.run(debug=True , host='0.0.0.0', port=8686) 



/*predict-test.py file*/
#!/usr/bin/env python
# coding: utf-8

import requests


url = 'http://localhost:8686/predict'


customer_id = 'xyz-123'
customer = {"contract": "two_year", "tenure": 1, "monthlycharges": 10}

response = requests.post(url , json=customer ).json()
print(response)

if response['churn'] == True:
    print('sending promo email to %s' %(customer_id))
else:
    print('not sending promo email to %s' %(customer_id))    


Commands:
 C:\Python\Homework> python predict.py
 
 C:\Python\Homework> python predict-test.py
 
 =================
 Answer:
{'churn': True, 'churn_probability': 0.9988892771007961}
sending promo email to xyz-123

Answer is 0.998

=====================================================================================
---> Question 5
Now create your own Dockerfile based on the image I prepared.

It should start like that:

FROM agrigorev/zoomcamp-model:3.8.12-slim
# add your stuff here
Now complete it:

Install all the dependencies form the Pipenv file
Copy your Flask script
Run it with gunicorn
When you build your image, what's the image id for agrigorev/zoomcamp-model:3.8.12-slim?

Look at the first step of your build log. It should look something like that:

$ docker some-command-for-building
Sending build context to Docker daemon  2.048kB
Step 1/N : FROM agrigorev/zoomcamp-model:3.8.12-slim
 ---> XXXXXXXXXXXX
Step 2/N : ....
You need this XXXXXXXXXXXX.

Alternatively, you can get this information when running docker images - it'll be in the "IMAGE ID" column. Submitting DIGEST (long string starting with "sha256") is also fine.


==============
Answer:
PS C:\Python\Homework> docker build -t homework-test .
Sending build context to Docker daemon 27.65 kB
Step 1/8 : FROM agrigorev/zoomcamp-model:3.8.12-slim
 ---> f0f43f7bc6e0
 
 ==================================================================================================================
 ---> Question 6
Let's run your docker container!

After running it, score this customer:

url = "YOUR_URL"
customer = {"contract": "two_year", "tenure": 12, "monthlycharges": 10}
requests.post(url, json=customer).json()
What's the probability that this customer is churning?

===============
Answer:
1-build then run the docker image
2-open a new terminal and run python predict-test.py

the result is:
PS C:\Python\Homework> python predict-test.py
{'churn': False, 'churn_probability': 0.32940789808151005}
not sending promo email to xyz-123

----> 0.329


        
        



